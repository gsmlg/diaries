* git 版本库
** 创建版本库
   git init <repo-dir>
** 添加
   git add <file>
** 提交
   git commit
** 查找版本库
   git grep "content"
** 显示版本库.git目录所在位置
   git rev-parse --git-dir
** 显示工作区根目录
   git rev-parse --show-toplevel
** 相对于工作区根的路径
   git rev-parse --show-prefix
** 路径相对深度
   git rev-parse --show-cdup
** 配置修改
   git config --system 系统
   git config --global 用户
   git config <setction>.<key> <value> 配置当前版本库
** 提交
   * git commit --amend --alow-empty --reset-author
     * 参数 --amend 对刚刚的提交修补，不会产生新提交
     * 参数 --allow-empty 允许空白提交
     * 参数 --reset-author 同步修改Author ID,否则只修改Commit ID
** Git Stage 暂存区
   * git reset HEAD 暂存区目录被master分支重写
   * git rm --cached <file> 直接从暂存区删除，工作区不影响
   * git checkout . 或 git checkout -- <file> 用暂存区替换工作区
   * git checkout HEAD . OR git checkout HEAD <file> 会用HEAD指向的
     所有master分支中的文件替换暂存区和工作区的文件
** Git diff
   * 工作区、暂存区和版本库的浏览
     - 显示HEAD版本
       git ls-tree -l HEAD
       -l 显示文件大小
     - 显示暂存区
       git ls-files -s
       git write-tree | xargs git ls-tree -l -r -t
   * diff
     - 工作区和暂存区
       git diff
     - 暂存区和HEAD比较
       git diff --cached
     - 工作区和HEAD比较
       git diff HEAD
       